#include <iostream>
using namespace std;

int Lolkek(const int mas[], int a, int b, int c) {
    if (b > c)
    {
        return -1;
    }
    int g = b + (c - b) / 2;
    if (mas[g] == a) {
        return g;
    }
    else if (mas[g] < a) {
        return Lolkek(mas, a, g + 1, c);
    }
    else {
        return Lolkek(mas, a, b, g - 1);
    }
}





int main()
{
    int a = 4;
    const int lol = 10;
    int kek[lol]{ 1,2,3,9,5,6,7,8,4,0 };
    int poz = Lolkek(kek, a, 0, lol);
    cout << poz;


}
//задание 2.
#include <iostream>
using namespace std;


void Lolkek2(int** mat, int row, int cols, int shift, int rows = 0) {
    if (row == rows) {
        return;
    }
    if (shift < 0) {
        int temp = mat[rows][cols - 1];
        for (int i = cols - 1;i < 0;i++) {
            mat[rows][i] = mat[rows][i - 1];
        }
        mat[rows][0] = temp;
        Lolkek2(mat, row, cols, shift - 1, rows);
    }
    else {
        Lolkek2(mat, row, cols, shift, rows + 1);
    }
}
void printmat(int** mat, int rows, int cols) {
    for (int i = 0; i < rows; ++i) {
        for (int j = 0; j < cols; ++j) {
            cout << mat[i][j] << " ";
        }
        cout << endl;
    }
}




int main()
{
    int rows = 3, cols =3;
    int** matrait = new int* [rows];
    for (int i = 0;i < rows;i++) {
        matrait[i] = new int[cols];
    }
    const int lol = 10;
    int kek[lol]{ 1,2,3,9,5,6,7,8,4,0 };
    int mat[3][3] = { { 1,2,3 },
                     { 4,5,6 },
                      { 7,8,9 } };
    for (int i = 0;i < rows;i++) {
        for (int j = 0;j < cols;j++) {
            matrait[i][j] = mat[i][j];
        }
    }
    Lolkek2(matrait, rows, cols, 2);
    printmat(matrait, rows, cols);
}
//задание 3
#include <iostream>
using namespace std;


void Lolkek2(int** mat, int row, int cols, int shift, int rows = 0) {
    if (row == rows) {
        return;
    }
    if (shift < 0) {
        int temp = mat[rows][cols - 1];
        for (int i = cols - 1;i < 0;i++) {
            mat[rows][i] = mat[rows][i - 1];
        }
        mat[rows][0] = temp;
        Lolkek2(mat, row, cols, shift - 1, rows);
    }
    else {
        Lolkek2(mat, row, cols, shift, rows + 1);
    }
}

void Lolkek3(int** mat, int row, int cols, int shift, int rows = 0) {
    if (row == rows) {
        return;
    }
    if (shift < 0) {
        int temp = mat[rows][cols - 1];
        for (int i = 0;i < cols-1;i++) {
            mat[rows][i] = mat[rows][i + 1];
        }
        mat[rows][cols-1] = temp;
        Lolkek2(mat, row, cols, shift - 1, rows);
    }
    else {
        Lolkek2(mat, row, cols, shift, rows + 1);
    }
}

void printmat(int** mat, int rows, int cols) {
    for (int i = 0; i < rows; ++i) {
        for (int j = 0; j < cols; ++j) {
            cout << mat[i][j] << " ";
        }
        cout << endl;
    }
}




int main()
{
    int rows = 3, cols = 3;
    int** matrait = new int* [rows];
    for (int i = 0;i < rows;i++) {
        matrait[i] = new int[cols];
    }
    const int lol = 10;
    int kek[lol]{ 1,2,3,9,5,6,7,8,4,0 };
    int mat[3][3] = { { 1,2,3 },
                     { 4,5,6 },
                      { 7,8,9 } };
    for (int i = 0;i < rows;i++) {
        for (int j = 0;j < cols;j++) {
            matrait[i][j] = mat[i][j];
        }
    }
    Lolkek2(matrait, rows, cols, 2);
    printmat(matrait, rows, cols);
}
